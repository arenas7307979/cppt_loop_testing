#!/bin/bash
# version="0.1"
#
# This is an optional arguments-only example of Argbash potential
#
# ARG_OPTIONAL_ACTION([build],[b],[build project])
# ARG_OPTIONAL_ACTION([clean],[c],[clean project])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='bch'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help ()
{
	printf '%s\n' "The libcppt help msg"
	printf 'Usage: %s [-b|--build] [-c|--clean] [-h|--help]\n' "$0"
	printf '\t%s\n' "-b,--build: build project"
	printf '\t%s\n' "-c,--clean: clean project"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-b|--build)
				mkdir -p build
				cd build
				cmake ..
				make -j6
				exit 0
				;;
			-c|--clean)
				rm -r build/
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


#echo "Value of --opt-arg: $_arg_opt_arg"
#echo "Verbosity degree: $_arg_verbose"
#echo "Include directories: ${_arg_include[*]}"

# ] <-- needed because of Argbash
